var tipuesearch = {"pages": [{'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n', 'tags': '', 'url': 'Develop.html'}, {'title': '小組直播每周影片', 'text': '', 'tags': '', 'url': '小組直播每周影片.html'}, {'title': 'W2', 'text': '\n \n 第一次利用直播進行線上組別討論，雖然這次大家都是第一次用，所以大家都不是很熟，但從經驗中磨練嘛，相信以後大家都會越來越上手 \n', 'tags': '', 'url': 'W2.html'}, {'title': 'W3', 'text': '\n 利用直播，我們每週多了更多的時間進行小組討論，我們也利用這段時間向組長進行回報進度，及提問，再進行大家的討論。 \n', 'tags': '', 'url': 'W3.html'}, {'title': 'W5', 'text': '\n 利用了連假時間將之前還沒完成的進度補上，而這周組長利用直播時間，分配新的進度給大家，並進行討論。 \n', 'tags': '', 'url': 'W5.html'}, {'title': 'W6', 'text': '', 'tags': '', 'url': 'W6.html'}, {'title': '瞭解四輪機器人', 'text': '', 'tags': '', 'url': '瞭解四輪機器人.html'}, {'title': '翻譯Coppelia Sim', 'text': '首先翻譯我們覺得比較有實用的內容 \n 可碰撞物體 (Collidable objects) \n 可碰撞對像是可以測試互相碰撞的對象，即將記錄碰撞狀態的對象。這並不意味著它們將對碰撞做出響應（即可響應），這有所不同。可碰撞的對象包括： \n \xa0 假人 \n 形狀 \n 超頻樹 \n 點雲 \n 由於基於點，因此虛擬對象和點雲只能與 OC 樹（基於體積）碰撞。 \n 集合也是可碰撞的，因為它們可能包含可碰撞的對象。 \n 可碰撞對象可以分別啟用或禁用其可碰撞屬性（默認情況下，對於非純形狀， OC 樹和點雲啟用）。可以在對象的公共屬性中或通過 sim.setObjectSpecialProperty API 函數進行設置。 \n 此外，可碰撞對象可以根據其相關的模型屬性（如果它們是模型的一部分）被覆蓋其可碰撞屬性。 \n \xa0 \n 可測對象 (Measurable objects) \n 可測量對像是可用於與其他可測量對象進行最小距離計算的對象。它們包括： \n \xa0 假人 \n 形狀 \n 超頻樹 \n 點雲 \n 集合也是可測量的，因為它們可能包含可測量的對象。 \n 可測量對象可以分別啟用或禁用其可測量屬性（默認情況下，對於非純形狀， OC 樹和點雲啟用）。可以在對象的公共屬性中或通過 sim.setObjectSpecialProperty API 函數進行設置。 \n 此外，可測量對象可以根據其相關的模型屬性（如果它們是模型的一部分）而覆蓋其可測量屬性。 \n \xa0 \n 可檢測物體 (Detectable objects) \n 可檢測物體是可以被接近傳感器檢測到的物體。它們包括： \n 假人 \n 形狀 \n 超頻樹 \n 點雲 \n 由於是基於點的虛擬和點雲，因此射線類型或隨機類型的接近傳感器無法檢測到。 \n 可以通過所有接近傳感器，或僅通過特定類型的接近傳感器或接近傳感器的子類別來檢測可檢測到的物體，如下所示： \n 超聲波接近傳感器 \n 紅外接近傳感器 \n 激光接近傳感器 \n 電感式接近傳感器 \n 電容式接近傳感器 \n 集合也是可檢測的，因為它們可能包含可檢測的對象。 \n 可檢測的對象可以分別啟用或禁用其可檢測屬性，並且對於所有類型的接近傳感器（默認情況下對非純形狀啟用）都啟用此屬性。可以在對象的公共屬性中或通過 sim.setObjectSpecialProperty API 函數進行設置。 \n 此外，可檢測對象可以根據其相關的模型屬性（如果它們是模型的一部分）被覆蓋其可檢測屬性。 \n \xa0 \n 可渲染對象 (Renderable objects) \n 可渲染對像是視覺傳感器可以看到或檢測到的對象。它們包括： \n 形狀 \n 路徑（但是必須啟用路徑整形功能） \n 圖形（僅呈現非靜態 3D 曲線） \n 超頻樹 \n 點雲 \n 集合也是可渲染的，因為它們可能包含可渲染的對象。 \n 您可以使可渲染對象僅由特定的視覺傳感器看到可渲染對像還可以分別啟用或禁用其 renderable 屬性（默認情況下啟用，純圖形除外）。可以在對象的公共屬性中或通過 sim.setObjectSpecialProperty API 函數進行設置。 \n 此外，可渲染對象可以根據其相關的模型屬性（如果它們是模型的一部分）而使其可渲染屬性被覆蓋。 \n \xa0 \n 可視對象 (Viewable objects) \n 可見對像是可以瀏覽，查看或可以顯示某些圖像內容的對象。它們包括： \n 攝影機 \n 視覺傳感器 \n 可視對象可以與將顯示其圖像內容的視圖關聯。 \n \xa0 \n 虛擬功能 (Dummy functions) \n 假人是多用途的對象。它們可以具有非常特定的功能，也可以僅用作輔助對象。以下偽函數是常見的： \n 用作點或參考系統：當您要跟蹤場景中特定點的位置和 / 或方向時，就是這種情況。虛擬位置可以與形狀頂點的位置匹配，例如，可以精確定位形狀：在頂點編輯模式下，從頂點創建虛擬對象，然後將形狀附加到虛擬對象（使虛擬對象成為父對象））。並且可以通過虛擬對象來操縱 / 定位形狀，該虛擬對象的位置與所選頂點相同。 \n 用作模型的代理或支持對象：通過將對象標記為模型基礎標誌來定義模型。任何對像都可以作為模型的基礎，但是虛擬對像是該模型的首選對象。 \n 用作標記點：例如，在評估機器人的工作空間時，可以在不同的時間間隔將假人放置在與機器人末端執行器相同的坐標上，最後可以提取所有添加的假人的凸包並顯示。有關更多詳細信息，請參閱凸包計算部分。 \n 用於指定逆運動學計算中的末端執行器和末端執行器目標位置 / 方向：逆運動學計算模塊處理運動鏈。每個鏈都有一個基礎對象和一個提示對象。尖端對象必須是假人，並且用戶經常將尖端假人定位和定向為與機器人的末端執行器重合。同時，為了以逆運動學模式移動運動鏈，需要機器人末端執行器的目標位置 / 方向。同樣，將虛擬對像用作目標對象。 \n 用於為動態模擬的機制創建循環閉合約束：有關更多詳細信息，請參考設計動態模擬的部分。 \n 用作路徑跟隨對象：虛擬對像是唯一可以分配留在路徑上（在路徑上自由，自由滑動）或跟隨路徑位置（固定在路徑上，沿著路徑在其當前固有位置固定）的對象。 \n \n \n 虛擬屬性 (Dummy properties) \n 虛擬屬性是場景對象屬性對話框的一部分，該對話框位於 [ 菜單欄 -> 工具 -> 場景對象屬性 ] 。還可以通過雙按場景層次結構中的對像圖標或單按其工具欄按鈕來打開對話框： \n \n 在場景對象屬性對話框中，單按“虛擬”按鈕以顯示虛擬對話框（“虛擬”按鈕僅在最後選擇的是虛擬對象時出現）。該對話框顯示最後選擇的虛擬對象的設置和參數。如果選擇了多個假人，則可以將某些參數從最後選擇的假人復製到其他選定的假人（適用於選擇按鈕）： \n \n 鏈接的虛擬對象：鏈接到此對象的虛擬對象。鏈接的虛擬對象（在場景和場景層次中，通過鏈接它們的彩色段很容易識別）具有特殊的屬性和行為，有關更多詳細信息，請參閱下一項。 \n 鏈接類型：鏈接類型將指定仿真期間鏈接的虛擬對象的行為。如果指定了“動力學，重疊約束”，則這兩個虛擬實體將嘗試重疊各自的位置 / 方向以創建動力學迴路閉合約束。如果指定了 IK ，則指定了刀尖目標，則兩個鏈接的虛擬對象形成了用於反向運動學計算的刀尖目標對。 \n 遵循主路徑的方向（唯一副路徑）：如果選中，則以路徑作為主（唯一副路徑）的虛擬對象將遵循該路徑的最接近貝塞爾曲線點的方向（而不是位置）。 另請參閱 sim.followPath API 函數（使用 sim.followPath 函數，不需要將虛擬對象與路徑作為主從關係）。 \n 遵循主路徑 ( 唯一主路徑 ) ：如果選中該選項，並且假人的主路徑是路徑對象，則假人的位置和方向將由該路徑自動計算（即將從路徑的 Bezier 點進行插值）。 \n 有兩種選擇：路徑自由或路徑固定。另請參閱 sim.followPath API 函數（使用 sim.followPath 函數，不需要將虛擬對象與路徑作為對象）。 \n 路徑上自由：選中該對像後，會將具有路徑對像作為對象的虛擬對象分配為留在路徑上（保持與路徑的 Bezier 點相同的位置和方向），但可以沿路徑自由移動。它可以通過對像操縱模式沿路徑移動，也可以由逆運動學模塊自動沿路徑引導。 \n 固定在路徑上：選中此選項後，會將具有路徑對像作為對象的虛擬對象分配為留在路徑上（與路徑的 Bezier 點保持相同的位置和方向），位於路徑的固有位置。一個比喻是在過山車的履帶部分上的貨車（將貨車拉起的初始部分）。在這種情況下，可以指定從路徑位置偏移的距離。 \n 偏移量：將假人分配到路徑上的固定位置時，與路徑位置的距離偏移量。如果要創建履帶，則履帶的第一個墊板（剛性元件）將位於偏移量 0 處，第二個墊板將位於偏移量 x 處，第二個墊板將位於偏移量 2x 處，依此類推。 \n 複製增量：添加到復制的虛擬對象的偏移量上的值（請參見上文）（例如，在創建毛毛蟲時，您可能需要幾十個墊板，每個墊板都可以自動計算出不同的偏移量）。 \n 對像大小：假人的大小。該參數僅具有視覺效果，沒有功能意義。 \n 調整虛擬顏色：允許調整虛擬顏色 \n', 'tags': '', 'url': '翻譯Coppelia Sim.html'}, {'title': '心得', 'text': '\n \n \n \n \n \n \n \n \n \n 在讀這本電子書之前我完全不了解CoppeliaSim，甚至我也沒聽過.....，不過經過我們一起翻譯，一起討論過後，讓我學到了很多不曾瞭解的知識，也讓我知道我還有很多事我要去努力學習的。 \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': '心得.html'}]};